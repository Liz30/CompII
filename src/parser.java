
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import treenodes.expresion.*;
import treenodes.statement.*;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\002\000\002\002\006" +
    "\000\002\002\013\000\002\002\011\000\002\002\006\000" +
    "\002\002\006\000\002\002\006\000\002\002\006\000\002" +
    "\002\007\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\007\003\000" +
    "\002\011\005\000\002\011\002\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\022\017\006\026\004\027\011\030\016\031" +
    "\014\032\012\033\010\035\013\001\002\000\004\011\100" +
    "\001\002\000\004\015\075\001\002\000\004\035\013\001" +
    "\002\000\024\002\062\017\006\026\004\027\011\030\016" +
    "\031\014\032\012\033\010\035\013\001\002\000\004\011" +
    "\056\001\002\000\004\011\053\001\002\000\004\011\050" +
    "\001\002\000\034\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\021\uffea\023\026" +
    "\024\uffea\025\uffea\001\002\000\004\011\022\001\002\000" +
    "\026\002\uffff\017\uffff\022\uffff\026\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\035\uffff\001\002\000\004\011" +
    "\017\001\002\000\004\012\020\001\002\000\004\004\021" +
    "\001\002\000\026\002\ufff8\017\ufff8\022\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\001\002" +
    "\000\004\012\023\001\002\000\004\004\024\001\002\000" +
    "\026\002\ufff7\017\ufff7\022\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\035\ufff7\001\002\000\032\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\021\uffe9\024\uffe9\025\uffe9\001\002\000" +
    "\010\011\032\034\031\035\013\001\002\000\026\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014" +
    "\uffef\021\uffef\024\uffef\001\002\000\026\004\ufff2\005\ufff2" +
    "\006\ufff2\007\042\010\041\012\ufff2\013\ufff2\014\ufff2\021" +
    "\ufff2\024\ufff2\001\002\000\026\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\021\uffed\024" +
    "\uffed\001\002\000\010\011\032\034\031\035\013\001\002" +
    "\000\010\005\036\006\037\024\035\001\002\000\026\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\021\uffec\024\uffec\001\002\000\032\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\021\uffeb\024\uffeb\025\uffeb\001\002\000\010\011" +
    "\032\034\031\035\013\001\002\000\010\011\032\034\031" +
    "\035\013\001\002\000\026\004\ufff3\005\ufff3\006\ufff3\007" +
    "\042\010\041\012\ufff3\013\ufff3\014\ufff3\021\ufff3\024\ufff3" +
    "\001\002\000\010\011\032\034\031\035\013\001\002\000" +
    "\010\011\032\034\031\035\013\001\002\000\026\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\021\ufff1\024\ufff1\001\002\000\026\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\021" +
    "\ufff0\024\ufff0\001\002\000\026\004\ufff4\005\ufff4\006\ufff4" +
    "\007\042\010\041\012\ufff4\013\ufff4\014\ufff4\021\ufff4\024" +
    "\ufff4\001\002\000\010\005\036\006\037\012\047\001\002" +
    "\000\026\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\021\uffee\024\uffee\001\002\000\004" +
    "\012\051\001\002\000\004\004\052\001\002\000\026\002" +
    "\ufff6\017\ufff6\022\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\035\ufff6\001\002\000\004\012\054\001" +
    "\002\000\004\004\055\001\002\000\026\002\ufff9\017\ufff9" +
    "\022\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\035\ufff9\001\002\000\010\011\032\034\031\035\013" +
    "\001\002\000\010\005\036\006\037\012\060\001\002\000" +
    "\004\004\061\001\002\000\026\002\ufff5\017\ufff5\022\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035" +
    "\ufff5\001\002\000\004\002\000\001\002\000\026\002\001" +
    "\017\001\022\001\026\001\027\001\030\001\031\001\032" +
    "\001\033\001\035\001\001\002\000\004\025\065\001\002" +
    "\000\010\011\032\034\031\035\013\001\002\000\010\005" +
    "\036\006\037\014\067\001\002\000\010\011\032\034\031" +
    "\035\013\001\002\000\010\005\036\006\037\021\071\001" +
    "\002\000\024\017\006\022\ufffd\026\004\027\011\030\016" +
    "\031\014\032\012\033\010\035\013\001\002\000\004\022" +
    "\074\001\002\000\024\017\006\022\ufffe\026\004\027\011" +
    "\030\016\031\014\032\012\033\010\035\013\001\002\000" +
    "\026\002\ufffb\017\ufffb\022\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\035\ufffb\001\002\000\010\011" +
    "\032\034\031\035\013\001\002\000\010\004\077\005\036" +
    "\006\037\001\002\000\026\002\ufffc\017\ufffc\022\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc" +
    "\001\002\000\010\011\032\034\031\035\013\001\002\000" +
    "\010\005\036\006\037\013\102\001\002\000\010\011\032" +
    "\034\031\035\013\001\002\000\010\005\036\006\037\012" +
    "\104\001\002\000\004\004\105\001\002\000\026\002\ufffa" +
    "\017\ufffa\022\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\035\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\010\002\014\003\006\010\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\063\001\001" +
    "\000\006\002\062\010\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\032\006\027\007\026\010\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\045\006\027\007\026\010\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\044\007\026\010\033\001\001\000\010\006\037\007\026" +
    "\010\033\001\001\000\002\001\001\000\006\007\043\010" +
    "\033\001\001\000\006\007\042\010\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\056\006\027\007\026\010\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\065\006\027\007\026\010\033\001\001\000" +
    "\002\001\001\000\012\005\067\006\027\007\026\010\033" +
    "\001\001\000\002\001\001\000\012\002\014\003\072\004" +
    "\071\010\004\001\001\000\002\001\001\000\006\002\062" +
    "\010\004\001\001\000\002\001\001\000\012\005\075\006" +
    "\027\007\026\010\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\100\006\027\007\026\010\033\001" +
    "\001\000\002\001\001\000\012\005\102\006\027\007\026" +
    "\010\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Hashtable<String,ExpresionNode> Posicion = new Hashtable<String, ExpresionNode>(); 
        
    public void report_error(String message, Object info) {
     
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              List<StatementNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<StatementNode> l = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode e = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                     if(parser.Posicion.containsKey("x")) {}
                     else
                     {
                        parser.Posicion.put("x",new NumberNode(0));
                        parser.Posicion.put("y",new NumberNode(0));
                     }
                     l.add(e);
                     RESULT = l;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<StatementNode> start_val = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              List<StatementNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode e = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!parser.Posicion.containsKey("x")){}
                    else
                    {
                        parser.Posicion.put("x", new NumberNode(0));
                        parser.Posicion.put("y", new NumberNode(0));
                    }
                    List<StatementNode> list = new ArrayList<StatementNode>();
                    list.add(e);
                    RESULT= list;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list_optional ::= expr_list 
            {
              List<StatementNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<StatementNode> l = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list_optional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list_optional ::= 
            {
              List<StatementNode> RESULT =null;
		RESULT=new ArrayList<StatementNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list_optional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= id ASSIGN expr SEMI 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionNode e = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentNode(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= FOR id ASSIGFOR expr COLON expr DO expr_list_optional END 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int initialValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initialValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpresionNode initialVal = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int finalValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int finalValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpresionNode finalVal = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<StatementNode> code = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForNode(i,initialVal,finalVal,code );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_part ::= SET_CURSOR LPAREN expr COMA expr RPAREN SEMI 
            {
              StatementNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpresionNode x = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionNode y = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.Posicion.put("x",x);
                                                                     parser.Posicion.put("y",y);
                                                                     RESULT = new SetCursorNode(x,y);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_part ::= MOVE_DOWN LPAREN RPAREN SEMI 
            {
              StatementNode RESULT =null;
		 RESULT = new MoveDownNode(parser.Posicion.get("x"),parser.Posicion.get("y")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_part ::= MOVE_UP LPAREN RPAREN SEMI 
            {
              StatementNode RESULT =null;
		 RESULT = new MoveUpNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_part ::= MOVE_LEFT LPAREN RPAREN SEMI 
            {
              StatementNode RESULT =null;
		 RESULT = new MoveLeftNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr_part ::= MOVE_RIGHT LPAREN RPAREN SEMI 
            {
              StatementNode RESULT =null;
		 RESULT = new MoveRightNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr_part ::= SET_COLOR LPAREN expr RPAREN SEMI 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionNode e = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SetColorNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr PLUS factor 
            {
              ExpresionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionNode e = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionNode f = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  SumOperatorNode(e,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr MINUS factor 
            {
              ExpresionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionNode e = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionNode f = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubstractOperatorNode(e,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= factor 
            {
              ExpresionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionNode f = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // factor ::= factor TIMES term 
            {
              ExpresionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionNode f = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionNode t = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplyOperatorNode(f,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= factor DIVIDE term 
            {
              ExpresionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionNode f = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionNode t = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new DivideOperatorNode(f,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= term 
            {
              ExpresionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionNode t = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= LPAREN expr RPAREN 
            {
              ExpresionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionNode e = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= NUMBER 
            {
              ExpresionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term ::= id 
            {
              ExpresionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = i;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // accesor ::= LBRACK expr RBRACK 
            {
              Accesor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionNode e = (ExpresionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new IndexAccesor(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // accesor ::= 
            {
              Accesor RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id ::= ID accesor 
            {
              IdNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Accesor a = (Accesor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
